Exp 7:
Code:
import cv2
import numpy as np
import os
import glob


# Define the size of the checkerboard
CHECKERBOARD = (6, 9)


# Criteria for corner detection
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)


# Initialize object points in 3D
objectp3d = np.zeros((1, CHECKERBOARD[0] * CHECKERBOARD[1], 3), np.float32)
objectp3d[0, :, :2] = np.mgrid[0:CHECKERBOARD[0], 0:CHECKERBOARD[1]].T.reshape(-1, 2)


# Initialize lists to store 3D and 2D points
threedpoints = []
twodpoints = []


# Get image filenames from the current directory
exp7 = glob.glob('*.jpg')


# Iterate through each image
for images in exp7:
    # Read the image
    image = cv2.imread(images)    
    # Convert the image to grayscale
    grayColor = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)    
    # Find chessboard corners
    ret, corners = cv2.findChessboardCorners(grayColor, CHECKERBOARD, cv2.CALIB_CB_ADAPTIVE_THRESH + cv2.CALIB_CB_FAST_CHECK + cv2.CALIB_CB_NORMALIZE_IMAGE)
    if ret == True:
        # Refine corner locations
        corners2 = cv2.cornerSubPix(grayColor, corners, (11, 11), (-1, -1), criteria)
        # Draw chessboard corners on the image
        image = cv2.drawChessboardCorners(image, CHECKERBOARD, corners2, ret)
        # Append 3D and 2D points
        threedpoints.append(objectp3d)
        twodpoints.append(corners2)
        # Display the image with chessboard corners
        cv2.imshow('img', image)
        cv2.waitKey(0)  # Wait for 500 milliseconds
        cv2.destroyAllWindows()


# Calibrate the camera
h, w = grayColor.shape[:2]
ret, matrix, distortion, r_vecs, t_vecs = cv2.calibrateCamera(threedpoints, twodpoints, (w, h), None, None)
# Print camera matrix, distortion coefficients, rotation vectors, and translation vectors
print("Camera matrix:")
print(matrix)
print("\nDistortion coefficients:")
print(distortion)
print("\nRotation vectors:")
print(r_vecs)
print("\nTranslation vectors:")
print(t_vecs)